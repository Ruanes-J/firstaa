<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.portal.mappers.portal">

<!-- 게시물 작성 -->
<insert id="write" parameterType="kr.porta.domain.portalVO">
 insert into
  tbl_board(userid, title, content, writer)
   values(#{userid}, #{title}, #{content}, #{writer})
</insert>

<!-- 게시물 목록 보기 -->
<select id="listPage" parameterType="hashMap" resultType="kr.portal.domain.portalVO">
   SELECT @seq:=@seq+1 as seq,bno,title,writer,regDate,viewCnt FROM (select @seq:=0) a, tbl_board b 
		<if test='searchType.equals("title")'>
			where title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			where content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			where title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("writer")'>
			where writer like concat('%', #{keyword}, '%')
		</if>
   
   	order BY bno desc limit #{displayPost}, #{postNum}
</select>

<!-- 게시물 조회 -->
<select id="view" parameterType="int" resultType="kr.portal.domain.portalVO">
	select userid, bno, title, content, writer, regDate, viewCnt,likeCnt,dislikeCnt from tbl_board where bno = #{bno}   
</select>

<!-- 게시물 수정 -->
<update id="modify" parameterType="kr.portal.domain.portalVO" >
 update tbl_board
  set
   title = #{title},
   content = #{content},
   writer = #{writer}
  where bno = #{bno}
</update>

<!-- 게시물 삭제 -->
<delete id="delete" parameterType="int">
  delete from tbl_board where bno = #{bno}
</delete>

<!-- 게시물 삭제 시 첨부파일 삭제(tbl_file에서 fileCheck을 N으로 변경) -->
<update id="fileCheckChange" parameterType="int">
	update tbl_file set fileCheck = 'N' where bno = #{bno}
</update>

<!-- 게시물 총 갯수 -->
<select id="count" parameterType="hashMap" resultType="int">
 select count(bno) from tbl_board
  
 		<if test='searchType.equals("title")'>
			where title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			where content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			where title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("writer")'>
			where writer like concat('%', #{keyword}, '%')
		</if>
 
</select>

<!-- 게시물 이전 페이지 -->
<select id="viewPrev" parameterType="hashMap" resultType="int">
   <![CDATA[
   select bno from tbl_board where bno in 
   	(select max(bno) from tbl_board where bno < #{bno} 
	]]>	
	
		<if test='searchType.equals("title")'>	
			and title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			and content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			and (title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%')) 
		</if>
		
		<if test='searchType.equals("writer")'>
			and writer like concat('%', #{keyword}, '%')
		</if> 	
   	) 
   
</select>

<!-- 게시물 다음 페이지 -->
<select id="viewNext" parameterType="hashMap" resultType="int">
   <![CDATA[
   select bno from tbl_board where bno IN 
   	( select min(bno) from tbl_board where bno > #{bno} 
   	
   ]]>	
   		<if test='searchType.equals("title")'>
			and title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			and content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			and (title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%'))
		</if>
		
		<if test='searchType.equals("writer")'>
			and writer like concat('%', #{keyword}, '%')
		</if>   	
   	)

</select>

<!-- 처음 등록된 게시물 번호 확인 -->
<select id="checkMIN" parameterType="hashMap" resultType="int">
   select MIN(bno) AS minbno from tbl_board 
   		<if test='searchType.equals("title")'>
			where title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			where content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			where title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("writer")'>
			where writer like concat('%', #{keyword}, '%')
		</if>
</select>

<!-- 마지막으로 등록된 게시물 번호 확인 -->
<select id="checkMAX" parameterType="hashMap" resultType="int">
   select MAX(bno) AS maxbno from tbl_board 
   		<if test='searchType.equals("title")'>
			where title like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			where content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("title_content")'>
			where title like concat('%', #{keyword}, '%') or
				content like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("writer")'>
			where writer like concat('%', #{keyword}, '%')
		</if>
</select>

<!-- 조회수 증가 -->
<update id="hitno" parameterType="kr.portal.domain.portalVO" >
 update tbl_board
  set
   viewCnt = #{viewCnt}
  where bno = #{bno}
</update>

<!--  파일 업로드(신규) -->
<insert id="insertFile" parameterType="hashMap">
	INSERT INTO tbl_file(
			BNO,
			USERID,
			ORG_FILE_NAME,
			STORED_FILE_NAME,
			FILE_SIZE
		)VALUES(
		    (SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_name = 'tbl_board' 
        		AND table_schema = DATABASE( ))-1,
			#{userid},
			#{org_file_name},
			#{stored_file_name},
			#{file_size}
		)
</insert>

<!--  파일 업로드(게시물 수정 과정에서 새로 등록된 파일 정보) -->
<insert id="updateFile" parameterType="hashMap">
	INSERT INTO tbl_file(
			BNO,
			USERID,
			ORG_FILE_NAME,
			STORED_FILE_NAME,
			FILE_SIZE
		)VALUES(
		    #{bno},
		    #{userid},
			#{org_file_name},
			#{stored_file_name},
			#{file_size}
		)
</insert>

<!-- 첨부 파일 업로드 정보 -->
<select id="fileList" parameterType="int" resultType="hashMap">
	select file_no, org_file_name, stored_file_name, round(file_size/1024,1) as file_size from tbl_file
	 where bno = #{bno} and fileCheck='Y' order by file_no asc
</select>

<!-- 첨부 파일 다운로드 정보 -->
<select id="fileInfo" parameterType="int" resultType="kr.portal.domain.portalVO">
	select stored_file_name, org_file_name from tbl_file where file_no = #{file_no}
</select>

<!-- 첨부 파일 삭제(tbl_file에서 레코드 삭제) -->
<delete id="fileDelete" parameterType="int">
	delete from tbl_file where file_no = #{file_no}
</delete>


<!-- 댓글 등록 -->
<insert id="replyInsert" parameterType="kr.portal.domain.portalVO">
	insert into tbl_reply (bno, userid, writer, replyContent) values 
		(#{bno}, #{userid}, #{writer}, #{replyContent})
</insert>

<!-- 댓글 리스트 & 내용 보기 -->
<select id="replyList" parameterType="int" resultType="kr.portal.domain.portalVO">
	select replyBno, userid, writer, replyContent, regDate from tbl_reply where bno=#{bno} order by replyBno desc
</select>

<!-- 댓글 수정 -->
<update id="replyUpdate" parameterType="hashMap">
	update tbl_reply set replyContent = #{replyContent}, modiDate = #{modiDate} where replyBno = #{replyBno}
</update>

<!-- 게시물 조회 화면에서 개별 댓글 삭제 -->
<delete id="replyDelete" parameterType="int">
	delete from tbl_reply where replyBno = #{replyBno}
</delete>

<!-- 게시물 삭제 시 댓글 전체 삭제 -->
<delete id="replyDeleteList" parameterType="int">
	delete from tbl_reply where bno = #{bno}
</delete>

<!-- 게시물 좋아요/싫어요 갯수만 조회 -->
<select id="listLikeCnt" parameterType="int" resultType="kr.portal.domain.portalVO">
	select likeCnt, dislikeCnt from tbl_board where bno = #{bno}  
</select>

<!-- 게시물 좋아요/싫어요 갯수 수정 -->
<update id="listLikeUpdate" parameterType="hashMap">
	update tbl_board set likeCnt = #{likeCnt}, dislikeCnt = #{dislikeCnt} where bno = #{bno}
</update>

<!-- 좋아요/싫어요 조회 -->
<select id="likeInfoList" parameterType="hashMap" resultType="kr.portal.domain.portalVO">
	select myLikeCheck, myDislikeCheck from tbl_like where userid = #{userid} and bno = #{bno}
</select>

<!-- 좋아요/싫어요 등록 -->
<insert id="likeInsert" parameterType="hashMap">
	insert into tbl_like (bno, userid, myLikeCheck, myDislikeCheck, likeDate, dislikeDate) values 
		(#{bno}, #{userid}, #{myLikeCheck}, #{myDislikeCheck}, #{likeDate}, #{dislikeDate})
</insert>

<!-- 좋아요/싫어요 수정 -->
<update id="likeUpdate" parameterType="hashMap">
	update tbl_like set myLikeCheck = #{myLikeCheck}, myDislikeCheck = #{myDislikeCheck}, likeDate = #{likeDate}, dislikeDate = #{dislikeDate} 
		where userid = #{userid} and bno = #{bno}
</update>

<!-- 회원 탈퇴시 회원이 등록한 좋아요/싫어요 전체 삭제 -->
<delete id="likeDelete" parameterType="string">
	delete from tbl_like where userid = #{userid}
</delete>
	
<!--  사용자 등록 -->
<update id="mbrInfoRegister" parameterType="kr.portal.domain.portalVO">
   update tbl_member set userpasswd = #{userpasswd}, username = #{username}, authority_code = '02', 
   	telno = #{telno}, email = #{email}, regiDate = #{regiDate}, pwModiDate = #{regiDate} where userid = #{userid}
</update>

<!-- 사용자 사진 등록 -->
<update id="mbrPhotoRegister" parameterType="hashMap" >
	insert into tbl_member (userid, img_org_file, img_stored_file, img_size) values 
		(#{userid}, #{org_file_name}, #{stored_file_name}, #{file_size})
</update>

<!-- 사용자 사진 변경 -->
<update id="mbrPhotoModify" parameterType="hashMap">
   update tbl_member set img_org_file = #{org_file_name}, img_stored_file = #{stored_file_name}, img_size = #{file_size} 
    	where userid = #{userid}
</update>

<!-- 사용자 로그인 정보 등록 -->
<update id="mbrLoginInfo" parameterType="hashMap">
	update tbl_member set lastLoginDate = #{lastLoginDate} where userid = #{userid}
</update>

<!-- 관리자용 사용정보 리스트 보기 -->
<select id="mbrInfoList" resultType="kr.portal.domain.portalVO">	
	SELECT @seq:=@seq+1 as seq, userid, username, regiDate, lastLoginDate FROM 
		(select @seq:=0) a, tbl_member b order by username
</select>

<!-- 사용자 정보 조회 -->
<select id="mbrInfoView" parameterType="string" resultType="kr.portal.domain.portalVO">
	select username, userpasswd, authority_code, telno, email, regiDate, lastLoginDate, pwModiDate, img_stored_file 
 		from tbl_member where userid = #{userid}   
</select>

<!-- 사용자 정보 수정 -->
<update id="mbrInfoModify" parameterType="kr.portal.domain.portalVO" >
 update tbl_member set telno = #{telno}, email = #{email} where userid = #{userid}
</update>

<!-- 사용자 암호 수정 -->
<update id="passwdModify" parameterType="kr.portal.domain.portalVO" >
 update tbl_member set userpasswd = #{userpasswd} where userid = #{userid}
</update>

<!-- 사용자 암호 수정일 등록 -->
<update id="passwdModiDate" parameterType="kr.portal.domain.portalVO" >
	update tbl_member set pwModiDate = #{pwModiDate} where userid = #{userid}
</update>
<!-- 사용자 암호 수정일 확인 및 변경 요청 -->
<select id="passwdModiView" parameterType="string" resultType="kr.portal.domain.portalVO">
	select pwModiDate from tbl_member where userid = #{userid}   
</select>

<!-- 회원탈퇴 시 사용자 개인정보, 등록한 게시물 정보 전체 삭제 -->
<delete id="mbrInfoDelete" parameterType="string">
  delete a,b from tbl_board a join tbl_member b on a.userid = b.userid where b.userid = #{userid}
</delete>

<!-- 회원 탈퇴 시 사용자 업로드한 파일정보 수정 : tbl_file 내 fileCheck를 N으로 변경 -->
<update id="mbrFileCheck" parameterType="string">
	update tbl_file set fileCheck = 'N' where userid = #{userid}
</update>

<!-- 회원 탈퇴시 사용자가 등록한 댓글 전체 삭제 -->
<delete id="mbrDeleteReplyList" parameterType="string">
	delete from tbl_reply where userid = #{userid}
</delete>

<!-- 로그인 -->
<select id="loginCheck" parameterType="hashMap" resultType="kr.portal.domain.portalVO">
    select userid, username, userpasswd, authority_code from tbl_member where userid = #{userid}
</select>

<!-- 아이디 중복 체크 -->
<select id="idCheck" resultType="int">
    select count(*) from tbl_member where userid = #{userid}
</select>

<!-- 아이디 찾기 -->
<select id="idFind" parameterType="String" resultType="String">
	select count(*) from tbl_member where email = #{email}
</select>

</mapper>